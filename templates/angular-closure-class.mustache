/*jshint -W069 */
//'use strict';
goog.provide('{{&moduleName}}.{{&className}}');

/**
 * {{&className}} service.
{{#description}}
 * {{&description}}
{{/description}}
 *
 * @param {angular.$q} $q
 * @param {angular.$http} $http
{{#isSecure}}
 * @param {object} {{&className}}AuthToken - object with value property and optional headerOrQueryName and isQuery properties
{{/isSecure}}
 * @ngInject
 * @constructor
 * @see http://www.mircozeiss.com/a-radical-new-approach-to-developing-angularjs-apps/
 *
 * usage:<pre>
 * goog.require('{{&moduleName}}.{{&className}}');
 *
 * // To use a different host, re-compile with -D{{&moduleName}}.{{&className}}.DOMAIN=http://localhost:8080"
 *
 * angular.module('demo', ['{{&moduleName}}'])
{{#isSecure}}
 *     .constant('{{&className}}AuthToken', {
 *         value: 'token-value',
 *         headerOrQueryName: 'token-name',   // the header or query name to send the token at
 *         isQuery: true           // if send the token as query param, otherwise, send as header param
 *     })
{{/isSecure}}
 *     .controller('myController', function({{&className}}) {
 *         this.record = {{&className}}.getRecordById(123);
 *     });
 * </pre>
 */
var {{&moduleName}}.{{&className}} = function ($q, $http{{#isSecure}}, {{&className}}AuthToken{{/isSecure}}) {
    {{#isSecure}}
        this.token = {{&className}}AuthToken;
    {{/isSecure}}

{{#methods}}
    {{> method}}
{{/methods}}
};

{{&moduleName}}.{{&className}}.transformRequest = function(obj) {
    var str = [];
    for(var p in obj) {
        var val = obj[p];
        if(angular.isArray(val)) {
            val.forEach(function(val){
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
            });
        } else {
            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(val));
        }
    }
    return str.join("&");
};

{{#isSecure}}
/**
 * Set Token
 * @name {{&className}}#setToken
 * @param {string} value - token's value
 * @param {string} headerOrQueryName - the header or query name to send the token at
 * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
 */
{{&moduleName}}.{{&className}}.prototype.setToken = function (value, headerOrQueryName, isQuery) {
    this.token.value = value;
    this.token.headerOrQueryName = headerOrQueryName;
    this.token.isQuery = isQuery;
};

{{/isSecure}}
/**
 * Base URL for all requests. Can be modified at compile time (for test/production):
 * <pre>
 * compilerFlags: {
 *   ...
 *   define: [
 *     "{{&moduleName}}.{{&className}}.DOMAIN=http://localhost:8080"
 *   ],
 * </pre>
 * @type {string}
 * @private
 * @const
 */
{{&moduleName}}.{{&className}}.DOMAIN = '{{&domain}}';

/*global angular:false */
angular.module('{{&moduleName}}', [])
    .service('{{&className}}', {{&moduleName}}.{{&className}});