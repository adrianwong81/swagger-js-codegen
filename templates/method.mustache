/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 */
{{#isClosure}}
this.{{&methodName}} = function(parameters){
{{/isClosure}}
{{^isClosure}}
{{&className}}.prototype.{{&methodName}} = function(parameters){
{{/isClosure}}
    parameters = parameters || {};
    var deferred = {{#isNode}}Q{{/isNode}}{{^isNode}}$q{{/isNode}}.defer();

    {{^isClosure}}
    var domain = this.domain;
    {{/isClosure}}
    var path = '{{&path}}'{{#hasParameters}},
        body,
        queryParameters = {},
        headers = {},
        form = {}{{/hasParameters}};

    {{#isSecure}}
        if (this.token.isQuery) {
            queryParameters[this.token.headerOrQueryName] = this.token.value;
        } else if (this.token.headerOrQueryName) {
            headers[this.token.headerOrQueryName] = this.token.value;    
        } else {
            headers['Authorization'] = 'Bearer ' + this.token.value;
        }
    {{/isSecure}}

    {{#parameters}}
        {{#required}}
            if(parameters['{{&camelCaseName}}'] === undefined){
                deferred.reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'));
                return deferred.promise;
            }
        {{/required}}

        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                        if(new RegExp('{{&pattern}}').test(parameterName)){
                            queryParameters[parameterName] = parameters[parameterName];
                        }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}
        
        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
        {{/isPathParameter}}
        
        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}
        
        {{#isBodyParameter}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                body = parameters['{{&camelCaseName}}'];
            }
        {{/isBodyParameter}}

        {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    form['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isFormParameter}}
    {{/parameters}}

    {{#hasParameters}}
        if(parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters)
                .forEach(function(parameterName){
                    var parameter = parameters.$queryParameters[parameterName];
                    queryParameters[parameterName] = parameter;
                });
            }
    {{/hasParameters}}

    {{> request}}
    
    return deferred.promise; 
};
